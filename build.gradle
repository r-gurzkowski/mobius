import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

buildscript {
    repositories {
        mavenCentral()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.23.4"
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.20'
    }
}

plugins {
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.benjaminsproule.license' version '0.16.2'
    id 'io.codearte.nexus-staging' version '0.21.2'
    id 'net.ltgt.errorprone' version '1.2.1'
    id 'com.android.library' version '7.4.2' apply false
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

static def isAndroidProject(Project p) {
    return p.plugins.findPlugin('com.android.library')
}

ext {
    minSdkVersion = 14
    compileSdkVersion = 25
    targetSdkVersion = compileSdkVersion

    versions = [
            'autoValue'        : '1.7',
            'assertjcore'      : '3.15.0',
            'awaitility'       : '4.0.2',
            'guava'            : '28.2-android',
            'junit'            : '4.13.2',
            'logback'          : '1.2.3',
            'rxJava'           : '1.3.8',
            'rxJava2'          : '2.2.17',
            'rxJava3'          : '3.0.0',
            'slf4j'            : '1.7.25',
            'jsr305'           : '3.0.2',
            'hamcrestLibrary'  : '2.2',
            'mockito'          : '3.10.0',
            'androidxLifecycle' : '2.2.0',
            'androidXCoreTesting' : '2.1.0',
            'errorProne'          : '2.4.0',
            'errorProneJavac'     : '9+181-r4173-1',
            'kotlinxCoroutines'  : '1.7.3',
    ]
}

subprojects {
    ext.VERSION_NAME = properties.version
    apply plugin: 'net.ltgt.errorprone'

    repositories {
        mavenCentral()
    }

    dependencies {
        errorprone("com.google.errorprone:error_prone_core:${versions.errorProne}")
        errorproneJavac("com.google.errorprone:javac:${versions.errorProneJavac}")
    }

    group = GROUP
    version = VERSION_NAME

    afterEvaluate { proj ->
        if (isAndroidProject(proj)) {
            // for android, auto-format, even though that leads to worse error messages for syntax
            // errors
            android.libraryVariants.all { variant ->
                variant.getJavaCompileProvider().configure {
                    dependsOn rootProject.tasks.format
                }
            }
        } else if (proj.plugins.findPlugin('java-library')) {
            proj.apply from: rootProject.file('gradle/binary_compatibility.gradle')
            // for Java (which is easier than android because AGP), ensure compilation is run before
            // formatting, since the compiler has much better error messages for syntax errors.
            rootProject.tasks.format.dependsOn(proj.tasks.compileTestJava)
        }
        // ensure that builds fail if code is not formatted properly
        proj.tasks.check.dependsOn(rootProject.tasks.verifyFormat)

        tasks.withType(JavaCompile).configureEach {
            options.errorprone.disableWarningsInGeneratedCode = true
            options.errorprone.disable("AutoValueImmutableFields")
            options.errorprone.disable("AutoValueSubclassLeaked")
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Werror"
        }
    }
}

task format(type: GoogleJavaFormat) {
    exclude '**/package-info.java'
}
task verifyFormat(type: VerifyGoogleJavaFormat) {
    exclude '**/package-info.java'
}

allprojects {
    apply plugin: 'com.benjaminsproule.license'

    license {
        header rootProject.file('apache2.header')
        exclude("**/AutoValue_*.java")
        mapping("java", "SLASHSTAR_STYLE")
    }

    getTasksByName('check', false).each { checkTask -> checkTask.dependsOn(tasks.withType(Javadoc)) }
}

nexusStaging {
    packageGroup = "com.spotify"
    numberOfRetries = 30
}

